using System;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace QuanLyNhanVien
{
    public partial class Form1 : Form
    {
        // Chuỗi kết nối (điều chỉnh lại nếu khác máy)
        private readonly string connectionString =
            @"Data Source=GYEST\\SQLEXPRESS;Initial Catalog=BookstoreDB;Integrated Security=True;TrustServerCertificate=True";

        // State
        private DataTable dtEmployees;            // Data nguồn cho DataGridView nhân viên
        private int currentEmployeeId = 0;        // ID bản ghi đang sửa
        private bool isEmployeeEditing = false;   // Cờ trạng thái đang Add/Edit

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            try
            {
                LoadRoles();
                LoadEmployees();
                dataGridViewEmployees.SelectionChanged += DataGridViewEmployees_SelectionChanged;
                SetEmployeeFormState(false);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Lỗi khởi động: " + ex.Message, "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        #region Tải dữ liệu
        private void LoadEmployees()
        {
            try
            {
                using (var conn = new SqlConnection(connectionString))
                using (var da = new SqlDataAdapter(@"SELECT id, name, email, phone, address, birth_date, role_id, hire_date, salary FROM employees ORDER BY name", conn))
                {
                    dtEmployees = new DataTable();
                    da.Fill(dtEmployees);
                    dataGridViewEmployees.DataSource = dtEmployees;

                    if (dataGridViewEmployees.Columns.Count > 0)
                    {
                        dataGridViewEmployees.Columns["id"].HeaderText = "ID";
                        dataGridViewEmployees.Columns["name"].HeaderText = "Họ và tên";
                        dataGridViewEmployees.Columns["email"].HeaderText = "Email";
                        dataGridViewEmployees.Columns["phone"].HeaderText = "Điện thoại";
                        dataGridViewEmployees.Columns["address"].HeaderText = "Địa chỉ";
                        dataGridViewEmployees.Columns["birth_date"].HeaderText = "Ngày sinh";
                        dataGridViewEmployees.Columns["role_id"].Visible = false; // Ẩn khóa ngoại
                        dataGridViewEmployees.Columns["hire_date"].HeaderText = "Ngày vào làm";
                        dataGridViewEmployees.Columns["salary"].HeaderText = "Lương";
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Lỗi tải nhân viên: " + ex.Message, "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void LoadRoles()
        {
            try
            {
                using (var conn = new SqlConnection(connectionString))
                using (var cmd = new SqlCommand("SELECT id, name FROM roles ORDER BY name", conn))
                using (var da = new SqlDataAdapter(cmd))
                {
                    var dt = new DataTable();
                    da.Fill(dt);
                    cmbRole.DisplayMember = "name";
                    cmbRole.ValueMember = "id";
                    cmbRole.DataSource = dt;
                    cmbRole.SelectedIndex = -1;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Lỗi tải chức vụ: " + ex.Message, "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        #endregion

        #region State & Helper
        private void ClearEmployeeForm()
        {
            txtFullName.Clear();
            txtEmail.Clear();
            txtPhone.Clear();
            txtAddress.Clear();
            dtpBirthDate.Value = DateTime.Today.AddYears(-18);
            cmbRole.SelectedIndex = -1;
            dtpHireDate.Value = DateTime.Today;
            nudSalary.Value = 0;
            currentEmployeeId = 0;
        }

        private void SetEmployeeFormState(bool editing)
        {
            isEmployeeEditing = editing;
            groupBox1.Enabled = editing;

            btnSave.Visible = editing;
            btnCancel.Visible = editing;

            btnAdd.Enabled = !editing;
            btnEdit.Enabled = !editing && dataGridViewEmployees.SelectedRows.Count > 0;
            btnDelete.Enabled = !editing && dataGridViewEmployees.SelectedRows.Count > 0;
            btnRefresh.Enabled = !editing;
        }

        private void DataGridViewEmployees_SelectionChanged(object sender, EventArgs e)
        {
            if (isEmployeeEditing) return;
            if (dataGridViewEmployees.SelectedRows.Count == 0)
            {
                ClearEmployeeForm();
                return;
            }

            var row = dataGridViewEmployees.SelectedRows[0];
            if (row.Cells["id"].Value == null) return;

            currentEmployeeId = Convert.ToInt32(row.Cells["id"].Value);
            txtFullName.Text = row.Cells["name"].Value?.ToString();
            txtEmail.Text = row.Cells["email"].Value?.ToString();
            txtPhone.Text = row.Cells["phone"].Value?.ToString();
            txtAddress.Text = row.Cells["address"].Value?.ToString();
            var birth = row.Cells["birth_date"].Value as DateTime?; if (birth.HasValue) dtpBirthDate.Value = birth.Value;
            var hire = row.Cells["hire_date"].Value as DateTime?; if (hire.HasValue) dtpHireDate.Value = hire.Value;
            if (row.Cells["role_id"].Value != null)
                cmbRole.SelectedValue = row.Cells["role_id"].Value;
            decimal sal;
            if (row.Cells["salary"].Value != null && decimal.TryParse(row.Cells["salary"].Value.ToString(), out sal))
                nudSalary.Value = sal <= nudSalary.Maximum ? sal : nudSalary.Maximum;

            // Cập nhật enable các nút theo selection mới
            btnEdit.Enabled = dataGridViewEmployees.SelectedRows.Count > 0 && !isEmployeeEditing;
            btnDelete.Enabled = btnEdit.Enabled;
        }
        #endregion

        #region Event: Buttons (Nhân viên)
        private void btnAdd_Click(object sender, EventArgs e)
        {
            currentEmployeeId = 0;
            ClearEmployeeForm();
            SetEmployeeFormState(true);
            txtFullName.Focus();
        }

        private void btnEdit_Click(object sender, EventArgs e)
        {
            if (dataGridViewEmployees.SelectedRows.Count == 0) return;
            SetEmployeeFormState(true);
            txtFullName.Focus();
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            if (dataGridViewEmployees.SelectedRows.Count == 0) return;
            var row = dataGridViewEmployees.SelectedRows[0];
            var name = row.Cells["name"].Value?.ToString();
            var id = currentEmployeeId;

            var dr = MessageBox.Show($"Xác nhận xóa nhân viên '{name}'?", "Xóa nhân viên", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (dr != DialogResult.Yes) return;

            try
            {
                using (var conn = new SqlConnection(connectionString))
                using (var cmd = new SqlCommand("DELETE FROM employees WHERE id = @id", conn))
                {
                    cmd.Parameters.AddWithValue("@id", id);
                    conn.Open();
                    int rows = cmd.ExecuteNonQuery();
                    if (rows > 0)
                        MessageBox.Show("Xóa thành công!", "Thành công", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    else
                        MessageBox.Show("Không tìm thấy nhân viên.", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Lỗi xóa: " + ex.Message, "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            LoadEmployees();
            ClearEmployeeForm();
            SetEmployeeFormState(false);
        }

        private void btnRefresh_Click(object sender, EventArgs e)
        {
            LoadRoles();
            LoadEmployees();
            ClearEmployeeForm();
            SetEmployeeFormState(false);
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            // Validate
            if (string.IsNullOrWhiteSpace(txtFullName.Text))
            {
                MessageBox.Show("Họ và tên không được để trống.", "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtFullName.Focus();
                return;
            }
            if (cmbRole.SelectedIndex < 0)
            {
                MessageBox.Show("Vui lòng chọn chức vụ.", "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                cmbRole.Focus();
                return;
            }

            try
            {
                using (var conn = new SqlConnection(connectionString))
                using (var cmd = new SqlCommand())
                {
                    cmd.Connection = conn;
                    if (currentEmployeeId == 0)
                    {
                        cmd.CommandText = @"INSERT INTO employees (name, email, phone, address, birth_date, role_id, hire_date, salary) VALUES (@name, @email, @phone, @address, @birth_date, @role_id, @hire_date, @salary)";
                    }
                    else
                    {
                        cmd.CommandText = @"UPDATE employees SET name=@name, email=@email, phone=@phone, address=@address, birth_date=@birth_date, role_id=@role_id, hire_date=@hire_date, salary=@salary WHERE id=@id";
                        cmd.Parameters.AddWithValue("@id", currentEmployeeId);
                    }

                    cmd.Parameters.AddWithValue("@name", txtFullName.Text.Trim());
                    cmd.Parameters.AddWithValue("@email", (object)txtEmail.Text.Trim() ?? DBNull.Value);
                    cmd.Parameters.AddWithValue("@phone", (object)txtPhone.Text.Trim() ?? DBNull.Value);
                    cmd.Parameters.AddWithValue("@address", (object)txtAddress.Text.Trim() ?? DBNull.Value);
                    cmd.Parameters.AddWithValue("@birth_date", dtpBirthDate.Value.Date);
                    cmd.Parameters.AddWithValue("@role_id", cmbRole.SelectedValue);
                    cmd.Parameters.AddWithValue("@hire_date", dtpHireDate.Value.Date);
                    cmd.Parameters.AddWithValue("@salary", nudSalary.Value);

                    conn.Open();
                    int affected = cmd.ExecuteNonQuery();
                    if (affected > 0)
                    {
                        MessageBox.Show(currentEmployeeId == 0 ? "Thêm nhân viên thành công!" : "Cập nhật nhân viên thành công!", "Thành công", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        MessageBox.Show("Không lưu được dữ liệu.", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Lỗi lưu: " + ex.Message, "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            LoadEmployees();
            SetEmployeeFormState(false);
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            SetEmployeeFormState(false);
            DataGridViewEmployees_SelectionChanged(null, null);
        }
        #endregion

        #region Handlers chưa dùng (để Designer không lỗi)
        private void label8_Click(object sender, EventArgs e) { }
        private void dateTimePicker2_ValueChanged(object sender, EventArgs e) { }
        private void tabPageEmployee_Click(object sender, EventArgs e) { }
        private void dgvRoles_CellContentClick(object sender, DataGridViewCellEventArgs e) { }
        private void txtFullName_TextChanged(object sender, EventArgs e) { }
        private void txtEmail_TextChanged(object sender, EventArgs e) { }
        private void txtPhone_TextChanged(object sender, EventArgs e) { }
        private void txtAddress_TextChanged(object sender, EventArgs e) { }
        private void dtpBirthDate_ValueChanged(object sender, EventArgs e) { }
        private void cmbRole_SelectedIndexChanged(object sender, EventArgs e) { }
        private void dtpHireDate_ValueChanged(object sender, EventArgs e) { }
        private void nudSalary_ValueChanged(object sender, EventArgs e) { }
        private void tabPageRole_Click(object sender, EventArgs e) { }
        private void btnAdd2_Click(object sender, EventArgs e) { }
        private void btnEdit2_Click(object sender, EventArgs e) { }
        private void btnDelete2_Click(object sender, EventArgs e) { }
        private void btnRefresh2_Click(object sender, EventArgs e) { }
        private void txtName_TextChanged(object sender, EventArgs e) { }
        private void txtDescription_TextChanged(object sender, EventArgs e) { }
        private void btnSave2_Click(object sender, EventArgs e) { }
        private void btnCancel2_Click(object sender, EventArgs e) { }
        private void tabPageShift_Click(object sender, EventArgs e) { }
        private void dgvShifts_CellContentClick(object sender, DataGridViewCellEventArgs e) { }
        private void dtpDate_ValueChanged(object sender, EventArgs e) { }
        private void button4_Click(object sender, EventArgs e) { }
        private void btnEdit3_Click(object sender, EventArgs e) { }
        private void btnDelete3_Click(object sender, EventArgs e) { }
        private void btnCoverage_Click(object sender, EventArgs e) { }
        private void cmbEmployee_SelectedIndexChanged(object sender, EventArgs e) { }
        private void dtpEnd_ValueChanged(object sender, EventArgs e) { }
        private void nudBreak_ValueChanged(object sender, EventArgs e) { }
        private void txtNotes_TextChanged(object sender, EventArgs e) { }
        private void btnSave3_Click(object sender, EventArgs e) { }
        private void btnCancel3_Click(object sender, EventArgs e) { }
        #endregion
    }
}
